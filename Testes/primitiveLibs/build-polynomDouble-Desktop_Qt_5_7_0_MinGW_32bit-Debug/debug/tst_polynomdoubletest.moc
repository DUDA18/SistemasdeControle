/****************************************************************************
** Meta object code from reading C++ file 'tst_polynomdoubletest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_polynomdoubletest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_PolynomDoubleTest_t {
    QByteArrayData data[48];
    char stringdata0[1587];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_PolynomDoubleTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_PolynomDoubleTest_t qt_meta_stringdata_PolynomDoubleTest = {
    {
QT_MOC_LITERAL(0, 0, 17), // "PolynomDoubleTest"
QT_MOC_LITERAL(1, 18, 31), // "constructorPolynomEscalarDouble"
QT_MOC_LITERAL(2, 50, 0), // ""
QT_MOC_LITERAL(3, 51, 44), // "constructorPolynomMatrixNumer..."
QT_MOC_LITERAL(4, 96, 44), // "constructorPolynomMatrixNumer..."
QT_MOC_LITERAL(5, 141, 44), // "constructorPolynomMatrixNumer..."
QT_MOC_LITERAL(6, 186, 33), // "PolynomCopyConstructorDoubleC..."
QT_MOC_LITERAL(7, 220, 33), // "PolynomCopyConstructorDoubleC..."
QT_MOC_LITERAL(8, 254, 55), // "constructorPolynomMatrixNumer..."
QT_MOC_LITERAL(9, 310, 55), // "constructorPolynomMatrixNumer..."
QT_MOC_LITERAL(10, 366, 28), // "constructorPolynomVoidDouble"
QT_MOC_LITERAL(11, 395, 28), // "destructorPolynomDoubleCase1"
QT_MOC_LITERAL(12, 424, 28), // "destructorPolynomDoubleCase2"
QT_MOC_LITERAL(13, 453, 17), // "getVarDoubleCase1"
QT_MOC_LITERAL(14, 471, 17), // "getVarDoubleCase2"
QT_MOC_LITERAL(15, 489, 17), // "getVarDoubleCase3"
QT_MOC_LITERAL(16, 507, 17), // "getVarDoubleCase4"
QT_MOC_LITERAL(17, 525, 15), // "changeVarDouble"
QT_MOC_LITERAL(18, 541, 16), // "getNumSizeDouble"
QT_MOC_LITERAL(19, 558, 16), // "getDenSizeDouble"
QT_MOC_LITERAL(20, 575, 12), // "getNumDouble"
QT_MOC_LITERAL(21, 588, 12), // "getDenDouble"
QT_MOC_LITERAL(22, 601, 17), // "setNumDoubleCase1"
QT_MOC_LITERAL(23, 619, 17), // "setNumDoubleCase2"
QT_MOC_LITERAL(24, 637, 17), // "setDenDoubleCase1"
QT_MOC_LITERAL(25, 655, 17), // "setDenDoubleCase2"
QT_MOC_LITERAL(26, 673, 20), // "assignOperatorDouble"
QT_MOC_LITERAL(27, 694, 24), // "copyAssignOperatorDouble"
QT_MOC_LITERAL(28, 719, 29), // "assignOperatorOtherTypeDouble"
QT_MOC_LITERAL(29, 749, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(30, 789, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(31, 829, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(32, 869, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(33, 909, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(34, 949, 40), // "operatorSumAccumulatorPolynom..."
QT_MOC_LITERAL(35, 990, 40), // "operatorSumAccumulatorPolynom..."
QT_MOC_LITERAL(36, 1031, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(37, 1079, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(38, 1127, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(39, 1175, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(40, 1223, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(41, 1271, 48), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(42, 1320, 48), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(43, 1369, 45), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(44, 1415, 46), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(45, 1462, 39), // "operatorDivisionAccumulatorSc..."
QT_MOC_LITERAL(46, 1502, 40), // "operatorDivisionAccumulatorPo..."
QT_MOC_LITERAL(47, 1543, 43) // "operatorPotentiationAccumulat..."

    },
    "PolynomDoubleTest\0constructorPolynomEscalarDouble\0"
    "\0constructorPolynomMatrixNumeratorDoubleCase1\0"
    "constructorPolynomMatrixNumeratorDoubleCase2\0"
    "constructorPolynomMatrixNumeratorDoubleCase3\0"
    "PolynomCopyConstructorDoubleCase1\0"
    "PolynomCopyConstructorDoubleCase2\0"
    "constructorPolynomMatrixNumeratorDenominatorDoubleCase1\0"
    "constructorPolynomMatrixNumeratorDenominatorDoubleCase2\0"
    "constructorPolynomVoidDouble\0"
    "destructorPolynomDoubleCase1\0"
    "destructorPolynomDoubleCase2\0"
    "getVarDoubleCase1\0getVarDoubleCase2\0"
    "getVarDoubleCase3\0getVarDoubleCase4\0"
    "changeVarDouble\0getNumSizeDouble\0"
    "getDenSizeDouble\0getNumDouble\0"
    "getDenDouble\0setNumDoubleCase1\0"
    "setNumDoubleCase2\0setDenDoubleCase1\0"
    "setDenDoubleCase2\0assignOperatorDouble\0"
    "copyAssignOperatorDouble\0"
    "assignOperatorOtherTypeDouble\0"
    "operatorSumAccumulatorScalarDoubleCase1\0"
    "operatorSumAccumulatorScalarDoubleCase2\0"
    "operatorSumAccumulatorScalarDoubleCase3\0"
    "operatorSumAccumulatorScalarDoubleCase4\0"
    "operatorSumAccumulatorScalarDoubleCase5\0"
    "operatorSumAccumulatorPolynomDoubleCase1\0"
    "operatorSumAccumulatorPolynomDoubleCase2\0"
    "operatorSubtractionAccumulatorScalarDoubleCase1\0"
    "operatorSubtractionAccumulatorScalarDoubleCase2\0"
    "operatorSubtractionAccumulatorScalarDoubleCase3\0"
    "operatorSubtractionAccumulatorScalarDoubleCase4\0"
    "operatorSubtractionAccumulatorScalarDoubleCase5\0"
    "operatorSubtractionAccumulatorPolynomDoubleCase1\0"
    "operatorSubtractionAccumulatorPolynomDoubleCase2\0"
    "operatorMultiplicationAccumulatorScalarDouble\0"
    "operatorMultiplicationAccumulatorPolynomDouble\0"
    "operatorDivisionAccumulatorScalarDouble\0"
    "operatorDivisionAccumulatorPolynomDouble\0"
    "operatorPotentiationAccumulatorScalarDouble"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_PolynomDoubleTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      46,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  244,    2, 0x08 /* Private */,
       3,    0,  245,    2, 0x08 /* Private */,
       4,    0,  246,    2, 0x08 /* Private */,
       5,    0,  247,    2, 0x08 /* Private */,
       6,    0,  248,    2, 0x08 /* Private */,
       7,    0,  249,    2, 0x08 /* Private */,
       8,    0,  250,    2, 0x08 /* Private */,
       9,    0,  251,    2, 0x08 /* Private */,
      10,    0,  252,    2, 0x08 /* Private */,
      11,    0,  253,    2, 0x08 /* Private */,
      12,    0,  254,    2, 0x08 /* Private */,
      13,    0,  255,    2, 0x08 /* Private */,
      14,    0,  256,    2, 0x08 /* Private */,
      15,    0,  257,    2, 0x08 /* Private */,
      16,    0,  258,    2, 0x08 /* Private */,
      17,    0,  259,    2, 0x08 /* Private */,
      18,    0,  260,    2, 0x08 /* Private */,
      19,    0,  261,    2, 0x08 /* Private */,
      20,    0,  262,    2, 0x08 /* Private */,
      21,    0,  263,    2, 0x08 /* Private */,
      22,    0,  264,    2, 0x08 /* Private */,
      23,    0,  265,    2, 0x08 /* Private */,
      24,    0,  266,    2, 0x08 /* Private */,
      25,    0,  267,    2, 0x08 /* Private */,
      26,    0,  268,    2, 0x08 /* Private */,
      27,    0,  269,    2, 0x08 /* Private */,
      28,    0,  270,    2, 0x08 /* Private */,
      29,    0,  271,    2, 0x08 /* Private */,
      30,    0,  272,    2, 0x08 /* Private */,
      31,    0,  273,    2, 0x08 /* Private */,
      32,    0,  274,    2, 0x08 /* Private */,
      33,    0,  275,    2, 0x08 /* Private */,
      34,    0,  276,    2, 0x08 /* Private */,
      35,    0,  277,    2, 0x08 /* Private */,
      36,    0,  278,    2, 0x08 /* Private */,
      37,    0,  279,    2, 0x08 /* Private */,
      38,    0,  280,    2, 0x08 /* Private */,
      39,    0,  281,    2, 0x08 /* Private */,
      40,    0,  282,    2, 0x08 /* Private */,
      41,    0,  283,    2, 0x08 /* Private */,
      42,    0,  284,    2, 0x08 /* Private */,
      43,    0,  285,    2, 0x08 /* Private */,
      44,    0,  286,    2, 0x08 /* Private */,
      45,    0,  287,    2, 0x08 /* Private */,
      46,    0,  288,    2, 0x08 /* Private */,
      47,    0,  289,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void PolynomDoubleTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        PolynomDoubleTest *_t = static_cast<PolynomDoubleTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->constructorPolynomEscalarDouble(); break;
        case 1: _t->constructorPolynomMatrixNumeratorDoubleCase1(); break;
        case 2: _t->constructorPolynomMatrixNumeratorDoubleCase2(); break;
        case 3: _t->constructorPolynomMatrixNumeratorDoubleCase3(); break;
        case 4: _t->PolynomCopyConstructorDoubleCase1(); break;
        case 5: _t->PolynomCopyConstructorDoubleCase2(); break;
        case 6: _t->constructorPolynomMatrixNumeratorDenominatorDoubleCase1(); break;
        case 7: _t->constructorPolynomMatrixNumeratorDenominatorDoubleCase2(); break;
        case 8: _t->constructorPolynomVoidDouble(); break;
        case 9: _t->destructorPolynomDoubleCase1(); break;
        case 10: _t->destructorPolynomDoubleCase2(); break;
        case 11: _t->getVarDoubleCase1(); break;
        case 12: _t->getVarDoubleCase2(); break;
        case 13: _t->getVarDoubleCase3(); break;
        case 14: _t->getVarDoubleCase4(); break;
        case 15: _t->changeVarDouble(); break;
        case 16: _t->getNumSizeDouble(); break;
        case 17: _t->getDenSizeDouble(); break;
        case 18: _t->getNumDouble(); break;
        case 19: _t->getDenDouble(); break;
        case 20: _t->setNumDoubleCase1(); break;
        case 21: _t->setNumDoubleCase2(); break;
        case 22: _t->setDenDoubleCase1(); break;
        case 23: _t->setDenDoubleCase2(); break;
        case 24: _t->assignOperatorDouble(); break;
        case 25: _t->copyAssignOperatorDouble(); break;
        case 26: _t->assignOperatorOtherTypeDouble(); break;
        case 27: _t->operatorSumAccumulatorScalarDoubleCase1(); break;
        case 28: _t->operatorSumAccumulatorScalarDoubleCase2(); break;
        case 29: _t->operatorSumAccumulatorScalarDoubleCase3(); break;
        case 30: _t->operatorSumAccumulatorScalarDoubleCase4(); break;
        case 31: _t->operatorSumAccumulatorScalarDoubleCase5(); break;
        case 32: _t->operatorSumAccumulatorPolynomDoubleCase1(); break;
        case 33: _t->operatorSumAccumulatorPolynomDoubleCase2(); break;
        case 34: _t->operatorSubtractionAccumulatorScalarDoubleCase1(); break;
        case 35: _t->operatorSubtractionAccumulatorScalarDoubleCase2(); break;
        case 36: _t->operatorSubtractionAccumulatorScalarDoubleCase3(); break;
        case 37: _t->operatorSubtractionAccumulatorScalarDoubleCase4(); break;
        case 38: _t->operatorSubtractionAccumulatorScalarDoubleCase5(); break;
        case 39: _t->operatorSubtractionAccumulatorPolynomDoubleCase1(); break;
        case 40: _t->operatorSubtractionAccumulatorPolynomDoubleCase2(); break;
        case 41: _t->operatorMultiplicationAccumulatorScalarDouble(); break;
        case 42: _t->operatorMultiplicationAccumulatorPolynomDouble(); break;
        case 43: _t->operatorDivisionAccumulatorScalarDouble(); break;
        case 44: _t->operatorDivisionAccumulatorPolynomDouble(); break;
        case 45: _t->operatorPotentiationAccumulatorScalarDouble(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject PolynomDoubleTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_PolynomDoubleTest.data,
      qt_meta_data_PolynomDoubleTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *PolynomDoubleTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *PolynomDoubleTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_PolynomDoubleTest.stringdata0))
        return static_cast<void*>(const_cast< PolynomDoubleTest*>(this));
    return QObject::qt_metacast(_clname);
}

int PolynomDoubleTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 46)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 46;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 46)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 46;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
