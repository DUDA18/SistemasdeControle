/****************************************************************************
** Meta object code from reading C++ file 'tst_matrixtest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_matrixtest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_MatrixTest_t {
    QByteArrayData data[41];
    char stringdata0[1134];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_MatrixTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_MatrixTest_t qt_meta_stringdata_MatrixTest = {
    {
QT_MOC_LITERAL(0, 0, 10), // "MatrixTest"
QT_MOC_LITERAL(1, 11, 24), // "constructorMatrixTypeInt"
QT_MOC_LITERAL(2, 36, 0), // ""
QT_MOC_LITERAL(3, 37, 25), // "constructorMatrixTypeChar"
QT_MOC_LITERAL(4, 63, 26), // "constructorMatrixTypeShort"
QT_MOC_LITERAL(5, 90, 26), // "constructorMatrixTypeFloat"
QT_MOC_LITERAL(6, 117, 27), // "constructorMatrixTypeDouble"
QT_MOC_LITERAL(7, 145, 31), // "constructorMatrixTypeLongDouble"
QT_MOC_LITERAL(8, 177, 37), // "constructorMatrixTypeCStringA..."
QT_MOC_LITERAL(9, 215, 36), // "constructorMatrixTypeStringAn..."
QT_MOC_LITERAL(10, 252, 32), // "constructorSizedVoidMatrixDouble"
QT_MOC_LITERAL(11, 285, 27), // "constructorNULLMatrixDouble"
QT_MOC_LITERAL(12, 313, 21), // "copyconstructorDouble"
QT_MOC_LITERAL(13, 335, 36), // "copyconstructorOtherTypeDoubl..."
QT_MOC_LITERAL(14, 372, 16), // "destructorDouble"
QT_MOC_LITERAL(15, 389, 24), // "removeRowDoubleFirstTest"
QT_MOC_LITERAL(16, 414, 25), // "removeRowDoubleSecondTest"
QT_MOC_LITERAL(17, 440, 24), // "removeRowDoubleThirdTest"
QT_MOC_LITERAL(18, 465, 27), // "removeColumnDoubleFirstTest"
QT_MOC_LITERAL(19, 493, 28), // "removeColumnDoubleSecondTest"
QT_MOC_LITERAL(20, 522, 27), // "removeColumnDoubleThirdTest"
QT_MOC_LITERAL(21, 550, 21), // "getNumberOfRowsDouble"
QT_MOC_LITERAL(22, 572, 24), // "getNumberOfColumnsDouble"
QT_MOC_LITERAL(23, 597, 12), // "getRowDouble"
QT_MOC_LITERAL(24, 610, 15), // "getColumnDouble"
QT_MOC_LITERAL(25, 626, 14), // "swapRowsDouble"
QT_MOC_LITERAL(26, 641, 17), // "swapColumnsDouble"
QT_MOC_LITERAL(27, 659, 12), // "lengthDouble"
QT_MOC_LITERAL(28, 672, 10), // "sizeDouble"
QT_MOC_LITERAL(29, 683, 12), // "isNullDouble"
QT_MOC_LITERAL(30, 696, 14), // "isSquareDouble"
QT_MOC_LITERAL(31, 711, 41), // "operatorParenthesisInputTwoUn..."
QT_MOC_LITERAL(32, 753, 52), // "operatorParenthesisInputTwoUn..."
QT_MOC_LITERAL(33, 806, 41), // "operatorParenthesisInputFromT..."
QT_MOC_LITERAL(34, 848, 41), // "operatorParenthesisInputUnsig..."
QT_MOC_LITERAL(35, 890, 39), // "operatorParenthesisInputFromT..."
QT_MOC_LITERAL(36, 930, 39), // "operatorParenthesisInputFromT..."
QT_MOC_LITERAL(37, 970, 39), // "operatorParenthesisInputMatri..."
QT_MOC_LITERAL(38, 1010, 41), // "operatorParenthesisInputUnsig..."
QT_MOC_LITERAL(39, 1052, 41), // "operatorParenthesisInputMatri..."
QT_MOC_LITERAL(40, 1094, 39) // "operatorParenthesisInputMatri..."

    },
    "MatrixTest\0constructorMatrixTypeInt\0"
    "\0constructorMatrixTypeChar\0"
    "constructorMatrixTypeShort\0"
    "constructorMatrixTypeFloat\0"
    "constructorMatrixTypeDouble\0"
    "constructorMatrixTypeLongDouble\0"
    "constructorMatrixTypeCStringAndDouble\0"
    "constructorMatrixTypeStringAndDouble\0"
    "constructorSizedVoidMatrixDouble\0"
    "constructorNULLMatrixDouble\0"
    "copyconstructorDouble\0"
    "copyconstructorOtherTypeDoubleAndInt\0"
    "destructorDouble\0removeRowDoubleFirstTest\0"
    "removeRowDoubleSecondTest\0"
    "removeRowDoubleThirdTest\0"
    "removeColumnDoubleFirstTest\0"
    "removeColumnDoubleSecondTest\0"
    "removeColumnDoubleThirdTest\0"
    "getNumberOfRowsDouble\0getNumberOfColumnsDouble\0"
    "getRowDouble\0getColumnDouble\0"
    "swapRowsDouble\0swapColumnsDouble\0"
    "lengthDouble\0sizeDouble\0isNullDouble\0"
    "isSquareDouble\0operatorParenthesisInputTwoUnsignedDouble\0"
    "operatorParenthesisInputTwoUnsignedOutputConstDouble\0"
    "operatorParenthesisInputFromToAndUnsigned\0"
    "operatorParenthesisInputUnsignedAndFromTo\0"
    "operatorParenthesisInputFromToAndFromTo\0"
    "operatorParenthesisInputFromToAndMatrix\0"
    "operatorParenthesisInputMatrixAndFromTo\0"
    "operatorParenthesisInputUnsignedAndMatrix\0"
    "operatorParenthesisInputMatrixAndUnsigned\0"
    "operatorParenthesisInputMatrixAndMatrix"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_MatrixTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      39,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  209,    2, 0x08 /* Private */,
       3,    0,  210,    2, 0x08 /* Private */,
       4,    0,  211,    2, 0x08 /* Private */,
       5,    0,  212,    2, 0x08 /* Private */,
       6,    0,  213,    2, 0x08 /* Private */,
       7,    0,  214,    2, 0x08 /* Private */,
       8,    0,  215,    2, 0x08 /* Private */,
       9,    0,  216,    2, 0x08 /* Private */,
      10,    0,  217,    2, 0x08 /* Private */,
      11,    0,  218,    2, 0x08 /* Private */,
      12,    0,  219,    2, 0x08 /* Private */,
      13,    0,  220,    2, 0x08 /* Private */,
      14,    0,  221,    2, 0x08 /* Private */,
      15,    0,  222,    2, 0x08 /* Private */,
      16,    0,  223,    2, 0x08 /* Private */,
      17,    0,  224,    2, 0x08 /* Private */,
      18,    0,  225,    2, 0x08 /* Private */,
      19,    0,  226,    2, 0x08 /* Private */,
      20,    0,  227,    2, 0x08 /* Private */,
      21,    0,  228,    2, 0x08 /* Private */,
      22,    0,  229,    2, 0x08 /* Private */,
      23,    0,  230,    2, 0x08 /* Private */,
      24,    0,  231,    2, 0x08 /* Private */,
      25,    0,  232,    2, 0x08 /* Private */,
      26,    0,  233,    2, 0x08 /* Private */,
      27,    0,  234,    2, 0x08 /* Private */,
      28,    0,  235,    2, 0x08 /* Private */,
      29,    0,  236,    2, 0x08 /* Private */,
      30,    0,  237,    2, 0x08 /* Private */,
      31,    0,  238,    2, 0x08 /* Private */,
      32,    0,  239,    2, 0x08 /* Private */,
      33,    0,  240,    2, 0x08 /* Private */,
      34,    0,  241,    2, 0x08 /* Private */,
      35,    0,  242,    2, 0x08 /* Private */,
      36,    0,  243,    2, 0x08 /* Private */,
      37,    0,  244,    2, 0x08 /* Private */,
      38,    0,  245,    2, 0x08 /* Private */,
      39,    0,  246,    2, 0x08 /* Private */,
      40,    0,  247,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void MatrixTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        MatrixTest *_t = static_cast<MatrixTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->constructorMatrixTypeInt(); break;
        case 1: _t->constructorMatrixTypeChar(); break;
        case 2: _t->constructorMatrixTypeShort(); break;
        case 3: _t->constructorMatrixTypeFloat(); break;
        case 4: _t->constructorMatrixTypeDouble(); break;
        case 5: _t->constructorMatrixTypeLongDouble(); break;
        case 6: _t->constructorMatrixTypeCStringAndDouble(); break;
        case 7: _t->constructorMatrixTypeStringAndDouble(); break;
        case 8: _t->constructorSizedVoidMatrixDouble(); break;
        case 9: _t->constructorNULLMatrixDouble(); break;
        case 10: _t->copyconstructorDouble(); break;
        case 11: _t->copyconstructorOtherTypeDoubleAndInt(); break;
        case 12: _t->destructorDouble(); break;
        case 13: _t->removeRowDoubleFirstTest(); break;
        case 14: _t->removeRowDoubleSecondTest(); break;
        case 15: _t->removeRowDoubleThirdTest(); break;
        case 16: _t->removeColumnDoubleFirstTest(); break;
        case 17: _t->removeColumnDoubleSecondTest(); break;
        case 18: _t->removeColumnDoubleThirdTest(); break;
        case 19: _t->getNumberOfRowsDouble(); break;
        case 20: _t->getNumberOfColumnsDouble(); break;
        case 21: _t->getRowDouble(); break;
        case 22: _t->getColumnDouble(); break;
        case 23: _t->swapRowsDouble(); break;
        case 24: _t->swapColumnsDouble(); break;
        case 25: _t->lengthDouble(); break;
        case 26: _t->sizeDouble(); break;
        case 27: _t->isNullDouble(); break;
        case 28: _t->isSquareDouble(); break;
        case 29: _t->operatorParenthesisInputTwoUnsignedDouble(); break;
        case 30: _t->operatorParenthesisInputTwoUnsignedOutputConstDouble(); break;
        case 31: _t->operatorParenthesisInputFromToAndUnsigned(); break;
        case 32: _t->operatorParenthesisInputUnsignedAndFromTo(); break;
        case 33: _t->operatorParenthesisInputFromToAndFromTo(); break;
        case 34: _t->operatorParenthesisInputFromToAndMatrix(); break;
        case 35: _t->operatorParenthesisInputMatrixAndFromTo(); break;
        case 36: _t->operatorParenthesisInputUnsignedAndMatrix(); break;
        case 37: _t->operatorParenthesisInputMatrixAndUnsigned(); break;
        case 38: _t->operatorParenthesisInputMatrixAndMatrix(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject MatrixTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_MatrixTest.data,
      qt_meta_data_MatrixTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *MatrixTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *MatrixTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_MatrixTest.stringdata0))
        return static_cast<void*>(const_cast< MatrixTest*>(this));
    return QObject::qt_metacast(_clname);
}

int MatrixTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 39)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 39;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 39)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 39;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
