/****************************************************************************
** Meta object code from reading C++ file 'tst_statespacedoubletest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_statespacedoubletest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_StateSpaceDoubleTest_t {
    QByteArrayData data[23];
    char stringdata0[304];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_StateSpaceDoubleTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_StateSpaceDoubleTest_t qt_meta_stringdata_StateSpaceDoubleTest = {
    {
QT_MOC_LITERAL(0, 0, 20), // "StateSpaceDoubleTest"
QT_MOC_LITERAL(1, 21, 23), // "SSVoidConstructorDouble"
QT_MOC_LITERAL(2, 45, 0), // ""
QT_MOC_LITERAL(3, 46, 29), // "SSContinuousConstructorDouble"
QT_MOC_LITERAL(4, 76, 27), // "SSDiscreteConstructorDouble"
QT_MOC_LITERAL(5, 104, 13), // "getSampleTime"
QT_MOC_LITERAL(6, 118, 4), // "getA"
QT_MOC_LITERAL(7, 123, 4), // "getB"
QT_MOC_LITERAL(8, 128, 4), // "getC"
QT_MOC_LITERAL(9, 133, 4), // "getD"
QT_MOC_LITERAL(10, 138, 14), // "getActualState"
QT_MOC_LITERAL(11, 153, 4), // "setA"
QT_MOC_LITERAL(12, 158, 4), // "setB"
QT_MOC_LITERAL(13, 163, 4), // "setC"
QT_MOC_LITERAL(14, 168, 4), // "setD"
QT_MOC_LITERAL(15, 173, 13), // "setContinuous"
QT_MOC_LITERAL(16, 187, 13), // "setSampleTime"
QT_MOC_LITERAL(17, 201, 15), // "setInitialState"
QT_MOC_LITERAL(18, 217, 12), // "isContinuous"
QT_MOC_LITERAL(19, 230, 17), // "isObservableCase1"
QT_MOC_LITERAL(20, 248, 17), // "isObservableCase2"
QT_MOC_LITERAL(21, 266, 18), // "isControlableCase1"
QT_MOC_LITERAL(22, 285, 18) // "isControlableCase2"

    },
    "StateSpaceDoubleTest\0SSVoidConstructorDouble\0"
    "\0SSContinuousConstructorDouble\0"
    "SSDiscreteConstructorDouble\0getSampleTime\0"
    "getA\0getB\0getC\0getD\0getActualState\0"
    "setA\0setB\0setC\0setD\0setContinuous\0"
    "setSampleTime\0setInitialState\0"
    "isContinuous\0isObservableCase1\0"
    "isObservableCase2\0isControlableCase1\0"
    "isControlableCase2"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_StateSpaceDoubleTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      21,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  119,    2, 0x08 /* Private */,
       3,    0,  120,    2, 0x08 /* Private */,
       4,    0,  121,    2, 0x08 /* Private */,
       5,    0,  122,    2, 0x08 /* Private */,
       6,    0,  123,    2, 0x08 /* Private */,
       7,    0,  124,    2, 0x08 /* Private */,
       8,    0,  125,    2, 0x08 /* Private */,
       9,    0,  126,    2, 0x08 /* Private */,
      10,    0,  127,    2, 0x08 /* Private */,
      11,    0,  128,    2, 0x08 /* Private */,
      12,    0,  129,    2, 0x08 /* Private */,
      13,    0,  130,    2, 0x08 /* Private */,
      14,    0,  131,    2, 0x08 /* Private */,
      15,    0,  132,    2, 0x08 /* Private */,
      16,    0,  133,    2, 0x08 /* Private */,
      17,    0,  134,    2, 0x08 /* Private */,
      18,    0,  135,    2, 0x08 /* Private */,
      19,    0,  136,    2, 0x08 /* Private */,
      20,    0,  137,    2, 0x08 /* Private */,
      21,    0,  138,    2, 0x08 /* Private */,
      22,    0,  139,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void StateSpaceDoubleTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        StateSpaceDoubleTest *_t = static_cast<StateSpaceDoubleTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->SSVoidConstructorDouble(); break;
        case 1: _t->SSContinuousConstructorDouble(); break;
        case 2: _t->SSDiscreteConstructorDouble(); break;
        case 3: _t->getSampleTime(); break;
        case 4: _t->getA(); break;
        case 5: _t->getB(); break;
        case 6: _t->getC(); break;
        case 7: _t->getD(); break;
        case 8: _t->getActualState(); break;
        case 9: _t->setA(); break;
        case 10: _t->setB(); break;
        case 11: _t->setC(); break;
        case 12: _t->setD(); break;
        case 13: _t->setContinuous(); break;
        case 14: _t->setSampleTime(); break;
        case 15: _t->setInitialState(); break;
        case 16: _t->isContinuous(); break;
        case 17: _t->isObservableCase1(); break;
        case 18: _t->isObservableCase2(); break;
        case 19: _t->isControlableCase1(); break;
        case 20: _t->isControlableCase2(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject StateSpaceDoubleTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_StateSpaceDoubleTest.data,
      qt_meta_data_StateSpaceDoubleTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *StateSpaceDoubleTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *StateSpaceDoubleTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_StateSpaceDoubleTest.stringdata0))
        return static_cast<void*>(const_cast< StateSpaceDoubleTest*>(this));
    return QObject::qt_metacast(_clname);
}

int StateSpaceDoubleTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 21)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 21;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 21)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 21;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
