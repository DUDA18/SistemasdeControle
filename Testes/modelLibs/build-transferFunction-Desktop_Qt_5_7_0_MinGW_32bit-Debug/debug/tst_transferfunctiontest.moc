/****************************************************************************
** Meta object code from reading C++ file 'tst_transferfunctiontest.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_transferfunctiontest.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_TransferFunctionTest_t {
    QByteArrayData data[47];
    char stringdata0[1552];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TransferFunctionTest_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TransferFunctionTest_t qt_meta_stringdata_TransferFunctionTest = {
    {
QT_MOC_LITERAL(0, 0, 20), // "TransferFunctionTest"
QT_MOC_LITERAL(1, 21, 23), // "TFVoidConstructorDouble"
QT_MOC_LITERAL(2, 45, 0), // ""
QT_MOC_LITERAL(3, 46, 28), // "TFRowColumnConstructorDouble"
QT_MOC_LITERAL(4, 75, 26), // "TFPolynomConstructorDouble"
QT_MOC_LITERAL(5, 102, 32), // "TFMatrixPolynomConstructorDouble"
QT_MOC_LITERAL(6, 135, 31), // "TFMatrixNumDenConstructorDouble"
QT_MOC_LITERAL(7, 167, 36), // "TFDiscreteRowColumnConstructo..."
QT_MOC_LITERAL(8, 204, 34), // "TFDiscretePolynomConstructorD..."
QT_MOC_LITERAL(9, 239, 40), // "TFDiscreteMatrixPolynomConstr..."
QT_MOC_LITERAL(10, 280, 39), // "TFDiscreteMatrixNumDenConstru..."
QT_MOC_LITERAL(11, 320, 18), // "isContinuousDouble"
QT_MOC_LITERAL(12, 339, 19), // "getSampleTimeDouble"
QT_MOC_LITERAL(13, 359, 21), // "getNumberOfRowsDouble"
QT_MOC_LITERAL(14, 381, 24), // "getNumberOfColumnsDouble"
QT_MOC_LITERAL(15, 406, 26), // "getNumberOfVariablesDouble"
QT_MOC_LITERAL(16, 433, 23), // "getNumberOfInputsDouble"
QT_MOC_LITERAL(17, 457, 24), // "getNumberOfOutputsDouble"
QT_MOC_LITERAL(18, 482, 23), // "getTimeSimulationDouble"
QT_MOC_LITERAL(19, 506, 19), // "setContinuousDouble"
QT_MOC_LITERAL(20, 526, 19), // "setSampleTimeDouble"
QT_MOC_LITERAL(21, 546, 30), // "operatorParenthesisDoubleCase1"
QT_MOC_LITERAL(22, 577, 30), // "operatorParenthesisDoubleCase2"
QT_MOC_LITERAL(23, 608, 29), // "operatorAtributionDoubleCase1"
QT_MOC_LITERAL(24, 638, 29), // "operatorAtributionDoubleCase2"
QT_MOC_LITERAL(25, 668, 29), // "operatorAtributionDoubleCase3"
QT_MOC_LITERAL(26, 698, 29), // "operatorAtributionDoubleCase4"
QT_MOC_LITERAL(27, 728, 29), // "operatorAtributionDoubleCase5"
QT_MOC_LITERAL(28, 758, 29), // "operatorAtributionDoubleCase6"
QT_MOC_LITERAL(29, 788, 29), // "operatorAtributionDoubleCase7"
QT_MOC_LITERAL(30, 818, 29), // "operatorAtributionDoubleCase8"
QT_MOC_LITERAL(31, 848, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(32, 888, 39), // "operatorSumAccumulatorScalarD..."
QT_MOC_LITERAL(33, 928, 35), // "operatorSumAccumulatorTFDoubl..."
QT_MOC_LITERAL(34, 964, 35), // "operatorSumAccumulatorTFDoubl..."
QT_MOC_LITERAL(35, 1000, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(36, 1048, 47), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(37, 1096, 43), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(38, 1140, 43), // "operatorSubtractionAccumulato..."
QT_MOC_LITERAL(39, 1184, 50), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(40, 1235, 50), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(41, 1286, 46), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(42, 1333, 46), // "operatorMultiplicationAccumul..."
QT_MOC_LITERAL(43, 1380, 44), // "operatorDivisionAccumulatorSc..."
QT_MOC_LITERAL(44, 1425, 44), // "operatorDivisionAccumulatorSc..."
QT_MOC_LITERAL(45, 1470, 40), // "operatorDivisionAccumulatorTF..."
QT_MOC_LITERAL(46, 1511, 40) // "operatorDivisionAccumulatorTF..."

    },
    "TransferFunctionTest\0TFVoidConstructorDouble\0"
    "\0TFRowColumnConstructorDouble\0"
    "TFPolynomConstructorDouble\0"
    "TFMatrixPolynomConstructorDouble\0"
    "TFMatrixNumDenConstructorDouble\0"
    "TFDiscreteRowColumnConstructorDouble\0"
    "TFDiscretePolynomConstructorDouble\0"
    "TFDiscreteMatrixPolynomConstructorDouble\0"
    "TFDiscreteMatrixNumDenConstructorDouble\0"
    "isContinuousDouble\0getSampleTimeDouble\0"
    "getNumberOfRowsDouble\0getNumberOfColumnsDouble\0"
    "getNumberOfVariablesDouble\0"
    "getNumberOfInputsDouble\0"
    "getNumberOfOutputsDouble\0"
    "getTimeSimulationDouble\0setContinuousDouble\0"
    "setSampleTimeDouble\0operatorParenthesisDoubleCase1\0"
    "operatorParenthesisDoubleCase2\0"
    "operatorAtributionDoubleCase1\0"
    "operatorAtributionDoubleCase2\0"
    "operatorAtributionDoubleCase3\0"
    "operatorAtributionDoubleCase4\0"
    "operatorAtributionDoubleCase5\0"
    "operatorAtributionDoubleCase6\0"
    "operatorAtributionDoubleCase7\0"
    "operatorAtributionDoubleCase8\0"
    "operatorSumAccumulatorScalarDoubleCase1\0"
    "operatorSumAccumulatorScalarDoubleCase2\0"
    "operatorSumAccumulatorTFDoubleCase1\0"
    "operatorSumAccumulatorTFDoubleCase2\0"
    "operatorSubtractionAccumulatorScalarDoubleCase1\0"
    "operatorSubtractionAccumulatorScalarDoubleCase2\0"
    "operatorSubtractionAccumulatorTFDoubleCase1\0"
    "operatorSubtractionAccumulatorTFDoubleCase2\0"
    "operatorMultiplicationAccumulatorScalarDoubleCase1\0"
    "operatorMultiplicationAccumulatorScalarDoubleCase2\0"
    "operatorMultiplicationAccumulatorTFDoubleCase1\0"
    "operatorMultiplicationAccumulatorTFDoubleCase2\0"
    "operatorDivisionAccumulatorScalarDoubleCase1\0"
    "operatorDivisionAccumulatorScalarDoubleCase2\0"
    "operatorDivisionAccumulatorTFDoubleCase1\0"
    "operatorDivisionAccumulatorTFDoubleCase2"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TransferFunctionTest[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      45,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  239,    2, 0x08 /* Private */,
       3,    0,  240,    2, 0x08 /* Private */,
       4,    0,  241,    2, 0x08 /* Private */,
       5,    0,  242,    2, 0x08 /* Private */,
       6,    0,  243,    2, 0x08 /* Private */,
       7,    0,  244,    2, 0x08 /* Private */,
       8,    0,  245,    2, 0x08 /* Private */,
       9,    0,  246,    2, 0x08 /* Private */,
      10,    0,  247,    2, 0x08 /* Private */,
      11,    0,  248,    2, 0x08 /* Private */,
      12,    0,  249,    2, 0x08 /* Private */,
      13,    0,  250,    2, 0x08 /* Private */,
      14,    0,  251,    2, 0x08 /* Private */,
      15,    0,  252,    2, 0x08 /* Private */,
      16,    0,  253,    2, 0x08 /* Private */,
      17,    0,  254,    2, 0x08 /* Private */,
      18,    0,  255,    2, 0x08 /* Private */,
      19,    0,  256,    2, 0x08 /* Private */,
      20,    0,  257,    2, 0x08 /* Private */,
      21,    0,  258,    2, 0x08 /* Private */,
      22,    0,  259,    2, 0x08 /* Private */,
      23,    0,  260,    2, 0x08 /* Private */,
      24,    0,  261,    2, 0x08 /* Private */,
      25,    0,  262,    2, 0x08 /* Private */,
      26,    0,  263,    2, 0x08 /* Private */,
      27,    0,  264,    2, 0x08 /* Private */,
      28,    0,  265,    2, 0x08 /* Private */,
      29,    0,  266,    2, 0x08 /* Private */,
      30,    0,  267,    2, 0x08 /* Private */,
      31,    0,  268,    2, 0x08 /* Private */,
      32,    0,  269,    2, 0x08 /* Private */,
      33,    0,  270,    2, 0x08 /* Private */,
      34,    0,  271,    2, 0x08 /* Private */,
      35,    0,  272,    2, 0x08 /* Private */,
      36,    0,  273,    2, 0x08 /* Private */,
      37,    0,  274,    2, 0x08 /* Private */,
      38,    0,  275,    2, 0x08 /* Private */,
      39,    0,  276,    2, 0x08 /* Private */,
      40,    0,  277,    2, 0x08 /* Private */,
      41,    0,  278,    2, 0x08 /* Private */,
      42,    0,  279,    2, 0x08 /* Private */,
      43,    0,  280,    2, 0x08 /* Private */,
      44,    0,  281,    2, 0x08 /* Private */,
      45,    0,  282,    2, 0x08 /* Private */,
      46,    0,  283,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TransferFunctionTest::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TransferFunctionTest *_t = static_cast<TransferFunctionTest *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->TFVoidConstructorDouble(); break;
        case 1: _t->TFRowColumnConstructorDouble(); break;
        case 2: _t->TFPolynomConstructorDouble(); break;
        case 3: _t->TFMatrixPolynomConstructorDouble(); break;
        case 4: _t->TFMatrixNumDenConstructorDouble(); break;
        case 5: _t->TFDiscreteRowColumnConstructorDouble(); break;
        case 6: _t->TFDiscretePolynomConstructorDouble(); break;
        case 7: _t->TFDiscreteMatrixPolynomConstructorDouble(); break;
        case 8: _t->TFDiscreteMatrixNumDenConstructorDouble(); break;
        case 9: _t->isContinuousDouble(); break;
        case 10: _t->getSampleTimeDouble(); break;
        case 11: _t->getNumberOfRowsDouble(); break;
        case 12: _t->getNumberOfColumnsDouble(); break;
        case 13: _t->getNumberOfVariablesDouble(); break;
        case 14: _t->getNumberOfInputsDouble(); break;
        case 15: _t->getNumberOfOutputsDouble(); break;
        case 16: _t->getTimeSimulationDouble(); break;
        case 17: _t->setContinuousDouble(); break;
        case 18: _t->setSampleTimeDouble(); break;
        case 19: _t->operatorParenthesisDoubleCase1(); break;
        case 20: _t->operatorParenthesisDoubleCase2(); break;
        case 21: _t->operatorAtributionDoubleCase1(); break;
        case 22: _t->operatorAtributionDoubleCase2(); break;
        case 23: _t->operatorAtributionDoubleCase3(); break;
        case 24: _t->operatorAtributionDoubleCase4(); break;
        case 25: _t->operatorAtributionDoubleCase5(); break;
        case 26: _t->operatorAtributionDoubleCase6(); break;
        case 27: _t->operatorAtributionDoubleCase7(); break;
        case 28: _t->operatorAtributionDoubleCase8(); break;
        case 29: _t->operatorSumAccumulatorScalarDoubleCase1(); break;
        case 30: _t->operatorSumAccumulatorScalarDoubleCase2(); break;
        case 31: _t->operatorSumAccumulatorTFDoubleCase1(); break;
        case 32: _t->operatorSumAccumulatorTFDoubleCase2(); break;
        case 33: _t->operatorSubtractionAccumulatorScalarDoubleCase1(); break;
        case 34: _t->operatorSubtractionAccumulatorScalarDoubleCase2(); break;
        case 35: _t->operatorSubtractionAccumulatorTFDoubleCase1(); break;
        case 36: _t->operatorSubtractionAccumulatorTFDoubleCase2(); break;
        case 37: _t->operatorMultiplicationAccumulatorScalarDoubleCase1(); break;
        case 38: _t->operatorMultiplicationAccumulatorScalarDoubleCase2(); break;
        case 39: _t->operatorMultiplicationAccumulatorTFDoubleCase1(); break;
        case 40: _t->operatorMultiplicationAccumulatorTFDoubleCase2(); break;
        case 41: _t->operatorDivisionAccumulatorScalarDoubleCase1(); break;
        case 42: _t->operatorDivisionAccumulatorScalarDoubleCase2(); break;
        case 43: _t->operatorDivisionAccumulatorTFDoubleCase1(); break;
        case 44: _t->operatorDivisionAccumulatorTFDoubleCase2(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TransferFunctionTest::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TransferFunctionTest.data,
      qt_meta_data_TransferFunctionTest,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *TransferFunctionTest::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TransferFunctionTest::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_TransferFunctionTest.stringdata0))
        return static_cast<void*>(const_cast< TransferFunctionTest*>(this));
    return QObject::qt_metacast(_clname);
}

int TransferFunctionTest::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 45)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 45;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 45)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 45;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
